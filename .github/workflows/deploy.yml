name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy Pulumi stack'
        required: true
        default: 'false'

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  PULUMI_STACK: ${{ secrets.PULUMI_ORG }}/finalcopy/dev
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if ECR repository exists
        run: |
           REPOSITORIES=$(aws ecr describe-repositories --region ${{ env.AWS_REGION }} --query 'repositories[].repositoryName' --output text)
           if [[ $REPOSITORIES =~ ${{ env.ECR_REPOSITORY }} ]]; then
             echo "ECR repository ${{ env.ECR_REPOSITORY }} exists"
           else
             echo "Creating ECR repository ${{ env.ECR_REPOSITORY }}..."
            aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
           fi

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }} .
          docker tag ${{ env.ECR_REPOSITORY }}:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest

  run-migrations:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run migrations
        run: |
          echo "Running database migrations..."

  deploy:
   runs-on: ubuntu-latest
   needs: run-migrations
   if: ${{ github.event.inputs.destroy != 'true' }}
   steps:
   - name: Checkout code
     uses: actions/checkout@v3
   - name: Install dependencies
     working-directory: ./infrastructure
     run: |
      python -m venv venv
      source venv/bin/activate
      pip install -r requirements.txt
   - name: Install Pulumi
     uses: pulumi/setup-pulumi@v2
     with:
       pulumi-version: "latest"
   - name: Create or select Pulumi stack
     working-directory: ./infrastructure
     env:
      PULUMI_ACCESS_TOKEN: ${{ env.PULUMI_ACCESS_TOKEN }}
      PULUMI_STACK: ${{ env.PULUMI_STACK }}
     run: |
       pulumi stack select ${{ env.PULUMI_STACK }} || pulumi stack init ${{ env.PULUMI_STACK }}
   - name: Deploy with Pulumi
     working-directory: ./infrastructure
     run: |
      source venv/bin/activate
      pulumi up --yes
     env:
      PULUMI_ACCESS_TOKEN: ${{ env.PULUMI_ACCESS_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ env.AWS_REGION }}

  destroy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.destroy == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Pulumi
        uses: pulumi/setup-pulumi@v2
        with:
          pulumi-version: "latest"

      - name: Select Pulumi stack
        working-directory: ./infrastructure
        env:
          PULUMI_ACCESS_TOKEN: ${{ env.PULUMI_ACCESS_TOKEN }}
          PULUMI_STACK: ${{ env.PULUMI_STACK }}
        run: |
          pulumi stack select ${{ env.PULUMI_STACK }}

      - name: Destroy with Pulumi
        working-directory: ./infrastructure
        run: |
          pulumi destroy --yes
        env:
          PULUMI_ACCESS_TOKEN: ${{ env.PULUMI_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

        